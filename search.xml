<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>QEMU</title>
    <url>/2024/03/03/QEMU/</url>
    <content><![CDATA[<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\qemu-img create -f raw try2.img 40G </span><br><span class="line">.\qemu-img create -f raw myimage.img 60G</span><br></pre></td></tr></table></figure>
<p>创建一个60G的raw格式磁盘</p>
<p><br></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\qemu-system-x86_64 -m 4G -hda try2.img -cdrom ubuntu-22.04.4.iso -boot order=d</span><br></pre></td></tr></table></figure>
<p>安装ubuntu<br><br></p>
<p>PS:貌似-hda换成-drive对于安装raw格式有奇效<br><br></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\qemu-system-x86_64w.exe -drive file=try2.img,index=0,media=disk, -m 4G -smp 4 -L Bios -usbdevice mouse -usbdevice keyboard -boot menu=on -rtc base=localtime,clock=host -parallel none -serial none -name ubuntu -no-acpi -no-hpet -no-reboot -device e1000,netdev=user.0 -netdev user,id=user.0,hostfwd=tcp::2222-:22 --accel hax</span><br><span class="line"></span><br><span class="line">.\qemu-system-x86_64 -m 4G -smp 4 -hda try2.img -bios bios.bin --accel hax</span><br><span class="line"></span><br><span class="line">.\qemu-system-x86_64 -m 4G -smp 4 -drive format=raw,file=./qwq.img -cdrom win7.iso -accel whpx</span><br><span class="line"></span><br><span class="line">qemu-system-x86_64.exe -machine q35 -smp sockets=1,cores=1,threads=2 -m 4G -usb -device usb-tablet -rtc base=localtime -drive file=qwq.img,media=disk -drive file=ubuntu-22.04.4-desktop-amd64.iso,media=cdrom -boot order=d</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>后面新学的不知道啥的玩意，但是用这个真的很丝滑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\qemu-system-x86_64 -m 4G -hda try2.img -bios bios.bin</span><br></pre></td></tr></table></figure>
<p>启动安装的磁盘（没试过不知道效果）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-machine/-M 设备类型</span><br><span class="line">-m 内存大小</span><br><span class="line">-smp 核心数</span><br><span class="line">-drive 驱动器映像文件</span><br><span class="line">- netdev 网络设备配置</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/weixin_39871788/article/details/123250595">参考博客1</a></p>
<h3 id="linux-MBR相关内容"><a href="#linux-MBR相关内容" class="headerlink" title="linux MBR相关内容"></a>linux MBR相关内容</h3><ul>
<li>查看磁盘 fdisk -l<ul>
<li>如果失效的话记得su root获得权限 <ul>
<li>再失效记得用sudo passwd root创建root</li>
</ul>
</li>
</ul>
</li>
<li>备份mbr到mbr.bin<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=/dev/sda of=mbr.bin bs=446 count=1</span><br></pre></td></tr></table></figure></li>
<li>查看<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxd mbr.bin</span><br></pre></td></tr></table></figure></li>
<li>反编译<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">objdump -D -b binary -mi386 -Maddr16,data16 mbr.bin</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="windows查看磁盘信息指令"><a href="#windows查看磁盘信息指令" class="headerlink" title="windows查看磁盘信息指令"></a>windows查看磁盘信息指令</h3><p>打开cmd，输入diskpart再enter<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list disk：查看磁盘，分区格式</span><br><span class="line">list volume：看到当前系统中的全部分区、盘符。</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>操作系统</tag>
        <tag>大二下</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2024/01/24/git/</url>
    <content><![CDATA[<h1 id="我要成为git高手（雾）"><a href="#我要成为git高手（雾）" class="headerlink" title="我要成为git高手（雾）"></a>我要成为git高手（雾）</h1><h3 id="初始化-绑定邮箱和账号"><a href="#初始化-绑定邮箱和账号" class="headerlink" title="初始化:绑定邮箱和账号"></a><strong>初始化:绑定邮箱和账号</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;ishland&quot;</span><br><span class="line">git config --global user.email </span><br></pre></td></tr></table></figure>
<h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a><strong>创建本地仓库</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:Tree-Summer/Mei_Sai.git</span><br></pre></td></tr></table></figure>
<h3 id="创建本地，远程分支，推送"><a href="#创建本地，远程分支，推送" class="headerlink" title="创建本地，远程分支，推送"></a><strong>创建本地，远程分支，推送</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch//查看本地分支</span><br><span class="line">git branch -r//查看远程分支</span><br><span class="line">git branch -a//查看所有分支</span><br><span class="line">git branch [branch name]//创建本地新分支</span><br><span class="line">git checkout [branch name]//切换到新分支</span><br><span class="line">switched to branch ‘develop2’//也是切换</span><br><span class="line">git checkout -b [branch name]//创建分支同时也切换分支</span><br></pre></td></tr></table></figure>
<h3 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a><strong>拉取</strong><br></h3><p>git pull:获取最新代码到本地，自动合并到当前分支<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v//查询当前远程分支</span><br><span class="line">git pull origin master//拉取远端origin/master分支合并到本地当前分支</span><br><span class="line">git pull origin dev//拉取origin/dev分支</span><br><span class="line">git pull origin master --allow-unrelated-histories//允许不同版本的拉取和合并</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>git fetch+merge:获取最新代码手动合并<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">git fetch orign master:master1//在本地建立master1分支，下载远端origin/master分支到master1分支</span><br><span class="line">git diff master1 //查看本地master1分支与当前分支版本差异</span><br><span class="line">git merge master1//合并本地分支master1到当前分支</span><br><span class="line">git branch -D master1//删除本地分支master1</span><br></pre></td></tr></table></figure><br>不额外建立本地分支<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">git fetch origin master</span><br><span class="line">git log -p master..origin/master//查看本地master与远端origin/master的版本差异</span><br><span class="line">git merge origin/master//合并远端分支origin/master到当前分支</span><br></pre></td></tr></table></figure></p>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a><strong>上传</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m</span><br><span class="line">git push origin [branch name]:[branch name]//推送本地新分支到远程仓库</span><br><span class="line">git push origin develop2</span><br></pre></td></tr></table></figure>
<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a><strong>合并</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge [分支名]//本地合并</span><br><span class="line">git fetch+merge//获取最新代码手动合并</span><br></pre></td></tr></table></figure>
<h3 id="连接问题"><a href="#连接问题" class="headerlink" title="连接问题"></a>连接问题</h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com //是否连接上</span><br></pre></td></tr></table></figure>
<h3 id="references"><a href="#references" class="headerlink" title="references"></a>references</h3><p>(<a href="https://blog.csdn.net/Thinkingcao/article/details/106059446">https://blog.csdn.net/Thinkingcao/article/details/106059446</a>)</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git ls-files //查看缓存区文件</span><br><span class="line">git reset . //已经add .后，用该命令重置</span><br><span class="line">git push origin --force //强制推送更改内容</span><br><span class="line">git branch -D [分支名]//删除分支内容</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>method</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo_method</title>
    <url>/2024/01/18/hexo-method/</url>
    <content><![CDATA[<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><ul>
<li><em>hexo clean</em> 清除一些东东（更改后必用，我也不知道清除啥）</li>
<li><em>hexo g</em> 生成一些东东（更改后必用）</li>
<li><em>hexo d</em> 部署网页</li>
<li><em>hexo s</em> 本地查看</li>
</ul>
<h2 id="基础修改"><a href="#基础修改" class="headerlink" title="基础修改"></a>基础修改</h2><p><strong>作者，图片，链接什么的在博客主题的config文件里更改，主题在config文件里更改，这俩在一个文件夹下。</strong></p>
<h2 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h2><p>未完待续</p>
<h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><p>未完待续</p>
]]></content>
      <tags>
        <tag>method</tag>
      </tags>
  </entry>
  <entry>
    <title>LSTM</title>
    <url>/2024/02/02/LSTM/</url>
    <content><![CDATA[<h2 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h2><p><a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/">一篇著名的博客</a></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>LSTM有三个门，用于调节神经元信息，选择性的让信息通过<br><br>门由sigmoid和神经网络层构成<br></p>
<ul>
<li>第一步：决定忘记哪些信息</li>
<li>第二步：更新</li>
<li>最后：输出</li>
</ul>
<h3 id="官方API"><a href="#官方API" class="headerlink" title="官方API"></a><a href="https://pytorch.org/docs/stable/nn.html#torch.nn.LSTM">官方API</a></h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul>
<li>input_size</li>
<li>hidden_size</li>
<li>num_layers</li>
<li>bias</li>
<li>batch_first</li>
<li>dropout</li>
<li><p>bidirectional</p>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4></li>
<li>input(seq_len,batch,input_size)</li>
<li>h_0(num_layers*num_directions,batch,hidden_size)</li>
<li>c_0(num_layers*num_directions,batch,hidden_size)</li>
</ul>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><ul>
<li>output(seq_len,batch,num_directions*hidden_size)</li>
<li>h_n(num_layers*num_directions,batch,hidden_size)</li>
<li>c_n(num_layers*num_directions,batch,hidden_size)</li>
<li></li>
</ul>
]]></content>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>linux操作</title>
    <url>/2024/03/04/linux%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="dd-用于读取，转换并输出数据"><a href="#dd-用于读取，转换并输出数据" class="headerlink" title="dd:用于读取，转换并输出数据"></a>dd:用于读取，转换并输出数据</h3><ul>
<li>if= 文件名：输入文件名，默认为标准输入。</li>
<li>of=文件名：输出</li>
<li>ibs=bytes：一次读入bytes个字节</li>
<li>obs=bytes：一次输出bytes个字节</li>
<li>bs=bytes：同时设置读入/输出的块大小为bytes个字节</li>
<li>count=blocks：仅拷贝blocks个块</li>
<li>—help：显示帮助信息</li>
<li>—version：显示版本信息</li>
</ul>
<h3 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h3><ul>
<li>-d：将代码段反汇编</li>
<li>-S：将代码段反汇编的同时，将反汇编与源代码交替显示，编译时要使用-g参数，即需要调试信息</li>
<li>-C：将C++符号名逆向解析</li>
<li>-l：反汇编代码中插入文件名和行号</li>
<li>-j section ：仅返汇编指定的section</li>
<li>—help</li>
</ul>
]]></content>
      <tags>
        <tag>操作系统</tag>
        <tag>大二下</tag>
        <tag>method</tag>
      </tags>
  </entry>
  <entry>
    <title>nasm</title>
    <url>/2024/03/14/nasm/</url>
    <content><![CDATA[<h2 id="NASM"><a href="#NASM" class="headerlink" title="NASM"></a>NASM</h2><p><a href="https://github.com/zhangjunlei26/NASM-Tutorial-CN">教程</a></p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nasm qwq.asm -o qwq.bin</span><br></pre></td></tr></table></figure>
<h3 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ndisasm -o 0x7C00 qwq.bin&gt;&gt;qwq.asm</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab</title>
    <url>/2024/01/19/matlab/</url>
    <content><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li>t=”qaq”定义字符串变量，加法直接在后面加,但是在数组里占一格</li>
<li>t=‘DNA’是字符，存三个字符，s=t(3) //s的值为A，char类型不能加，添加用[t,’www’]</li>
<li>如果一个操作数是标量，另一个操作数不是标量，matlab会将该标量隐式扩展为与另一个操作数具有相同的大小</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>[D,V]=eig(A) 求特征向量</li>
<li>B=A’ 求转置</li>
<li>E=inv(A) 求逆矩阵</li>
<li>C=A*B 矩阵乘法</li>
<li>E=A.*B 矩阵点乘，对应元素相乘</li>
<li>x=A\b等效于inv(A)*b</li>
<li><strong>linprog函数</strong>：求解线性规划问题<br><br>[x,fval,exitflag]=linprog(f,A,b,Aeq,beq,lb,ub)<br><br>Linprog输入：<br><br>f是目标函数的系数矩阵<br><br>A是线性规划不等式约束的变量系数矩阵<br><br>b是不等式约束的资源数<br><br>Aeq和beq是相应等式约束的变量系数矩阵和资源数<br><br>lb和ub为保变量的上下区间<br><br>linprog返回值：<br>x为求得的各变量的值，fval为最优化的值，exitflag是函数的退出标志</li>
</ul>
<ul>
<li><p><a href="https://blog.csdn.net/f_h_h/article/details/100537394"> intlinprog:整数约束变量</a>：<br><br>intcon ：整数所在位置<br></p>
<ul>
<li>输出：disp（a）</li>
<li>输入：a=input(“请输入a的值”)</li>
<li>plot（b）画图</li>
<li>grid on 添加网格线</li>
</ul>
</li>
<li><p><strong><a href="https://blog.csdn.net/qq_25018077/article/details/88998126">function</a></strong>：<br><br>function [y1,…,yn]=myfun(x1,…,xm)<br><br>前面是输出，后面是输入</p>
</li>
<li><p><strong>fmincon</strong>：<br><br>  [x,val]=fmincon(fun,x0,A,b,Aeq,beq,lb,ub,nonlcon)<br>  fun:单独脚本文件里定义的目标函数<br><br>  x0:决策变量的初始值<br><br>  nonclcon:非线性约束，包括不等式和等式<br>  <img src="https://www.freeimg.cn/i/2024/01/21/65ad229922aa0.png" alt="加载不出来了qwq"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function f=fun1(x);</span><br><span class="line">f=sum(x.^2)+8;  %编写目标函数</span><br><span class="line">end</span><br><span class="line">%记得写在函数文件里</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function [g,h]=fun2(x);</span><br><span class="line">g=[-x(1).^2+x(2)-x(3).^2;x(1)+x(2).^2+x(3)^2-20];</span><br><span class="line">h=[-x(1)-x(2).^2+2;x(2)+2*x(3).^2-3];</span><br><span class="line">end%约束函数，g是不等式约束，h是等式约束</span><br></pre></td></tr></table></figure>
<p>最后求解用[x,y]=fmincon(‘fun1’,rand(3,1),[],[],[],[],zeros(3,1),[],’fun2’)即可</p>
<ul>
<li>读入excel文件处理<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[tx,str]=xlsread(&#x27;Problem_C_Data_Wordle.xlsx&#x27;);</span><br><span class="line">time=tx(:,1);</span><br><span class="line">Altitude=tx(:,3);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>sort函数原数组是不改动的，需要将sort后的返回值记录下来</p>
</li>
<li><p><a href="https://blog.csdn.net/dsydsylove/article/details/116225942">fit,fittype曲线拟合</a></p>
</li>
<li>beta分布<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data1 = betarnd(4,3,100,1);%生成符合beta分布的数值</span><br><span class="line">data1=sort(data1);%排序方便下面看数值长啥样</span><br><span class="line">plot(data1)</span><br><span class="line">hold on;</span><br><span class="line">[p,ci] = betafit(data1,0.01);%拟合</span><br><span class="line">x=0:0.01:1;</span><br><span class="line">y=betapdf(x,p(1,1),p(1,2));%求概率密度</span><br><span class="line">plot(x,y);</span><br><span class="line">xlabel(&#x27;x&#x27;);</span><br><span class="line">ylabel(&#x27;y&#x27;);</span><br></pre></td></tr></table></figure></li>
<li><p>用已有的拟合模板（见下面官方文档链接）拟合曲线</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[fit_result,gof]=fit(x,y,&#x27;poly7&#x27;);%x是自变量，y是因变量，poly7是可替换的</span><br><span class="line">disp(fit_result);</span><br><span class="line">plot(fit_result,x,y);</span><br></pre></td></tr></table></figure>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2></li>
<li>编程文件：写了运行命令行弹出结果</li>
<li>实时文件：左边代码右边结果，点击文本后可以插入图片，使用markdown语法</li>
<li>函数文件：无法直接使用，在脚本文件中调用</li>
</ul>
<h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><ul>
<li>%后面是注释</li>
<li>写完一行代码末尾加分号会执行运算但是不在命令行窗口输出（不写就输出了是吧qaq）</li>
</ul>
<ul>
<li>命令行：<ul>
<li>clc（清空命令行）</li>
<li>clear（清空工作区）</li>
<li>按向上方向键调用历史命令</li>
</ul>
</li>
<li>快捷键：<ul>
<li>ctrl+N新建脚本</li>
<li>ctrl+Z撤销，ctrl+Y撤销过头时回溯<ul>
<li>ctrl+F 查找或替换变量名</li>
<li>F5保存并运行</li>
<li>F10单步执行</li>
<li>F9运行代码选中片段</li>
<li>ctrl+r片段注释，ctrl+t注销</li>
<li>ctrl+e实时脚本文字，代码转换</li>
<li>ctrl+j:自动整理注释</li>
<li>ctrl+i：智能缩进代码</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://ww2.mathworks.cn/help/curvefit/list-of-library-models-for-curve-and-surface-fitting.html#btbcxna-1">一些模型的中英对照</a></p>
]]></content>
      <tags>
        <tag>method</tag>
      </tags>
  </entry>
  <entry>
    <title>建模知识点</title>
    <url>/2024/01/19/%E5%BB%BA%E6%A8%A1%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h2 id="线性优化："><a href="#线性优化：" class="headerlink" title="线性优化："></a>线性优化：</h2><p><img src="https://www.freeimg.cn/i/2024/01/19/65aa8775e6348.png" alt="qaq"></p>
<ul>
<li>重点是写出矩阵，列好约束，所有变量都是一次方</li>
<li>特例:整数优化：任务分配问题，其中有01规划<br><img src="https://www.freeimg.cn/i/2024/01/19/65aa8775e6348.png" alt="qwq"></li>
</ul>
<h2 id="非线性规划"><a href="#非线性规划" class="headerlink" title="非线性规划"></a>非线性规划</h2><p>与线性的区别：至少一个变量不是一次方\<br>求解运用matlab函数fmincon</p>
<ul>
<li>“怎样安排/分配”“尽量多/少”“最多（少）”“利润最大”“最合理”</li>
<li>投资规划</li>
<li>角度调整：含有三角函数</li>
<li>生产安排</li>
</ul>
<h2 id="多目标规划"><a href="#多目标规划" class="headerlink" title="多目标规划"></a><a href="https://blog.csdn.net/weixin_45745854/article/details/107433168">多目标规划</a></h2><p>插一嘴：我现在觉得凸优化是神作了，鲁棒优化那一章讲全了，为什么我没有带回来那本书呜呜<br></p>
<p>线性，非线性都是固定目标,多目标规划的目标之间是相互冲突的</p>
<p>目前求解多目标优化问题方法主要有基于数学的规划方法和基于遗传算法的两类方法</p>
<ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/616882532">传统规划方法</a><br>  三个概念：正负偏差变量，绝对约束和目标约束，优先因子</p>
<ul>
<li><strong>目标约束</strong>的不等式允许有偏差，通过正负偏差变量实现，如 8x~1~ +10x~2~ +d~i~^-^ -d~i~^+^ =56<ul>
<li>主观上先确定优先因子<strong>P~k~</strong><br>建立模型很重要，求解使用matlab的fgoalattain函数</li>
</ul>
</li>
</ul>
</li>
<li><p>NSGA-II</p>
<ul>
<li>提供了快速非支配的排序算法，降低了计算非支配序的复杂度</li>
<li>引入了精英策略，扩大了采样空间。将父代种群与其产生的子代种群组合在一起，共同通过竞争来产生下一代种群，这有利于是父代中的优良个体得以保持，保证那些优良的个体在进化过程中不被丢弃，从而提高优化结果的准确度。并且通过对种群所有个体分层存放，使得最佳个体不会丢失，能够迅速提高种群水平。</li>
<li>引入拥挤度和拥挤度比较算子，这不但克服了NSGA算法中需要人为指定共享参数的缺陷，而且将拥挤度作为种群中个体之间的比较准则，使得准Pareto域中的种群个体能均匀扩展到整个Pareto域，从而保证了种群的多样性。</li>
</ul>
</li>
</ul>
<h2 id="灰色预测模型"><a href="#灰色预测模型" class="headerlink" title="灰色预测模型"></a><a href="https://blog.csdn.net/qq_25601345/article/details/107745041">灰色预测模型</a></h2><p>少量的，不完全的信息建立模型并预测<br><br>需要检验是否符合标准<br><br>常微分方程求解那里有机会需要搞懂<br><img src="https://www.freeimg.cn/i/2024/01/22/65ae715f0c70b.png" alt="图片找不到了qwq"></p>
<h2 id="Topsis层次分析法"><a href="#Topsis层次分析法" class="headerlink" title="Topsis层次分析法"></a><a href="https://zhuanlan.zhihu.com/p/266689519">Topsis层次分析法</a></h2><p>评价类，充分利用原始数据，无需数据检验</p>
<h2 id="beta分布破防记录"><a href="#beta分布破防记录" class="headerlink" title="beta分布破防记录"></a>beta分布破防记录</h2><p>一直画不出对的图，因为输入错了，错将频数当y了，事实上频数应该是很多个x啊啊啊，频数对应的值才是y啊喂，附上宝贵的代码<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data1 = betarnd(4,3,100,1);%生成符合beta分布的数值</span><br><span class="line">data1=sort(data1);%排序方便下面看数值长啥样</span><br><span class="line">plot(data1)</span><br><span class="line">hold on;</span><br><span class="line">[p,ci] = betafit(data1,0.01);%拟合</span><br><span class="line">x=0:0.01:1;</span><br><span class="line">y=betapdf(x,p(1,1),p(1,2));%求概率密度</span><br><span class="line">plot(x,y);</span><br><span class="line">xlabel(&#x27;x&#x27;);</span><br><span class="line">ylabel(&#x27;y&#x27;);</span><br></pre></td></tr></table></figure></p>
<h2 id="概率论相关知识点"><a href="#概率论相关知识点" class="headerlink" title="概率论相关知识点"></a>概率论相关知识点</h2><p>贝叶斯的 <a href="https://zhuanlan.zhihu.com/p/401258319">看着还不错的一个系列</a><br><br>先验分布：已知原因结果的概率<br><br>后验分布：已知结果原因的概率<br><br>后验预测分布：已知结果预测新数据分布<br></p>
<p><a href="https://ww2.mathworks.cn/help/stats/fitdist.html">对数据进行概率分布对象拟合</a><br><br><a href="https://ww2.mathworks.cn/help/stats/histfit.html">正态分布拟合直方图画图及修改</a><br></p>
<h2 id="灰色关联度分析"><a href="#灰色关联度分析" class="headerlink" title="灰色关联度分析"></a>灰色关联度分析</h2><p>在一个灰色系统中，我们想要了解其中某个我们所关注的项目受其他因素影响的相对强弱</p>
<ul>
<li>确立母序列</li>
<li>归一化<ul>
<li>初值化：把一个序列的数据统一除以最开始的值</li>
<li>均值化：把序列的数据除以均值</li>
<li>计算灰色关联系数</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>发疯记录</title>
    <url>/2024/03/18/%E5%8F%91%E7%96%AF%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="24-3-18-16：02"><a href="#24-3-18-16：02" class="headerlink" title="24/3/18 16：02"></a>24/3/18 16：02</h3><p>快！要！疯！啦！<br><br>做人怎么这么难，想要当一个精神稳定的人怎么这么难！<br><br>啊啊啊啊啊，救救孩子吧.I am useless to them.</p>
<h3 id="24-3-25-17：06"><a href="#24-3-25-17：06" class="headerlink" title="24/3/25 17：06"></a>24/3/25 17：06</h3><p>又到了每周发疯的时候了，我再次感受到了人类的悲伤。It’s so easy to be rejected。<br>期望这种东西就不应该对任何人怀有，除了那几个已经认识很多年的，认识的不能再清楚的人。也不是，只要没有期望，就不会有失望了，除了最坏的情况外剩下的都是惊喜，这不是一件好事吗呵呵</p>
]]></content>
      <tags>
        <tag>随机</tag>
      </tags>
  </entry>
  <entry>
    <title>数理逻辑</title>
    <url>/2024/02/29/%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91/</url>
    <content><![CDATA[<h3 id="2024-2-29"><a href="#2024-2-29" class="headerlink" title="2024/2/29"></a>2024/2/29</h3><ul>
<li>检验论证的两个维度：论证的前提，论证的过程</li>
<li>论证的有效性（valid）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 小明要么在玩原神，要么就在玩星穹铁道</span><br><span class="line">2. 小明不在玩原神</span><br><span class="line">3. 小明在玩星穹铁道</span><br></pre></td></tr></table></figure>
以上推理“滴水不漏”——演绎（deduction）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 南雍楼的咖啡味道正常的时候，从来没让人拉过肚子</span><br><span class="line">2. 我今天在南雍楼买的这一杯咖啡味道正常</span><br><span class="line">3. 我今天在南雍楼买的这一杯咖啡不会让我拉肚子</span><br></pre></td></tr></table></figure>
以上推理很有可能，但存在“漏洞”——归纳（induction）</li>
</ul>
<p>有效性的一种非正式定义：我们称一个推演步骤是有效的当且仅当不存在任何一种可能，令该推演的前提为真且结论为假。同样地，在这种情况下我们称这些前提蕴涵（entails）其结论。</p>
<ul>
<li><p>一致性</p>
</li>
<li><p>有效，非有效，真</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. true → false一定是非有效推演</span><br><span class="line">2. 非有效推演不一定是true → false</span><br></pre></td></tr></table></figure></li>
<li><p>可靠性（soundness）<br><br>在有效性基础下要求前提为真</p>
</li>
<li><p>iff=if and only if <br></p>
<script type="math/tex; mode=display">x/=y:the denial of x=y</script><script type="math/tex; mode=display">x/\in y:the denial of x\in y</script></li>
</ul>
<h3 id="2024-3-17"><a href="#2024-3-17" class="headerlink" title="2024/3/17"></a>2024/3/17</h3><ul>
<li>表达式是有穷个符号构成的序列</li>
<li><a href="https://www.bilibili.com/read/cv13338834/">合式公式</a>(wff:well-formed formulas)的定义：<script type="math/tex; mode=display">\psi::=A_{i}| (\neg\psi)|(\psi_{1}\wedge\psi_{2})|(\psi_{1}\vee\psi_{2})|(\psi_{1}\rightarrow\psi_{2})|(\psi_{1}\leftrightarrow\psi_{2})\\合式公式=\cap\{X:所有的Ai都属于X并且X是封闭的\}</script></li>
<li>有穷序列被称为一个命题公式的构造序列，当且仅当i&lt;=n满足以下条件之一：<ul>
<li><script type="math/tex; mode=display">\epsilon是一个命题符号</script></li>
<li><script type="math/tex; mode=display">\epsilon_i=\varepsilon_{\neg}(\epsilon_j)</script></li>
<li><script type="math/tex; mode=display">\epsilon=\varepsilon_{\Box}(\epsilon_j,\epsilon_k),j<i且k<i,\\其中\Box是\wedge,\vee,\rightarrow,\leftrightarrow中的一个</script></li>
</ul>
</li>
<li>自下而上：从第0项往上推到第n项<br>自上而下：先写第n项，再往下计算&lt;n的项</li>
</ul>
<p>因过于抽象，遂放弃看PPT</p>
<h3 id="24-3-19"><a href="#24-3-19" class="headerlink" title="24/3/19"></a>24/3/19</h3><ul>
<li>满足下列所有条件的关系R1称为R的关于P的闭包<ul>
<li>R1满足性质P</li>
<li>如果存在集合A上的关系R’，R’满足性质P并包含R，则R1属于R’</li>
</ul>
</li>
</ul>
</script></li></ul></li></ul>]]></content>
      <tags>
        <tag>大二下</tag>
        <tag>课程</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习导论</title>
    <url>/2024/03/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AF%BC%E8%AE%BA/</url>
    <content><![CDATA[<h3 id="2024-3-5"><a href="#2024-3-5" class="headerlink" title="2024/3/5"></a>2024/3/5</h3><p>模型评估与选择</p>
<ul>
<li><a href="https://blog.csdn.net/qq_41133375/article/details/105804319/?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0--blog-75127138.235^v43^pc_blog_bottom_relevance_base3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">查准率与查全率</a> <br></li>
<li><a href="https://www.zhihu.com/question/56817713">查准率和查全率为什么说是互相矛盾的？</a> <br><ul>
<li>查准率：预测T中实际T占比 <br></li>
<li>查全率：实际T中预测T占比 <br></li>
</ul>
</li>
<li>ROC曲线<ul>
<li>绘制 <br></li>
<li>AUC：ROC面积/1-l~rank~ <br></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>大二下</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/2024/02/26/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="2024-2-26"><a href="#2024-2-26" class="headerlink" title="2024/2/26"></a>2024/2/26</h3><ul>
<li>数据库管理系统是一种管理数据库的系统软件<br>（ DBMS）</li>
<li>SQL语言<ul>
<li>DDL：数据定义语言</li>
<li>DML：数据操纵语言</li>
<li>DCL： 数据控制语言 </li>
</ul>
</li>
</ul>
<h3 id="2024-3-4-数据模型"><a href="#2024-3-4-数据模型" class="headerlink" title="2024/3/4 数据模型"></a>2024/3/4 数据模型</h3><p>数据模型的四个世界：<br></p>
<ol>
<li>现实世界<br></li>
<li>概念世界:与具体的DBMS和计算机无关<br><br> i）几种模型：<ul>
<li>实体-联系（<strong>E-R</strong>）模型<br>  基本概念：实体，属性，联系，以及它们之间的连接关系<br>  <br>实体：矩形,联系：菱形，属性：椭圆,<strong>带下划线的属性为各实体集的关键字属性</strong><br>  <br>为了刻划实体间的函数对应关系，必须在线段边上用1:1（一对一），1:n（一对多），n:m（多对多）等注明<br>  <br><a href="https://www.zhihu.com/tardis/zm/art/270299029?source_id=1005">参考</a></li>
<li>扩充的实体-联系（<strong>EE-R</strong>）模型<ul>
<li>IS-A联系（单向箭头）<br><br> 如果实体B是实体A的子集，则实体A是实体B的超集，实体B是实体A的子集<br><br>子集B可以通过IS-A联系继承超集A的所有属性</li>
<li>弱实体（依附某些实体存在）：向关系打单向箭头</li>
</ul>
</li>
<li>面向对象模型：对象，类，消息</li>
<li>谓词模型</li>
</ul>
</li>
<li>信息世界：<br> <br>以概念世界为基础，选用特定DBMS构造而成的逻辑数据模型<br><br> 关系中的基本概念：<ul>
<li>关系模式：一个关系的关系名及其属性名的集合构成该关系的关系模式</li>
<li>关系数据库模式：该关系数据库中所有关系的关系模式的集合</li>
<li>元组：关系的每一行</li>
<li>关键字：能唯一标识关系中的一个元组，不含多余的属性值<ul>
<li>主关键字</li>
<li>外关键字</li>
</ul>
</li>
</ul>
</li>
<li>计算机世界：是DB的最终实现结构<br></li>
</ol>
<h3 id="2024-3-11-关系模型"><a href="#2024-3-11-关系模型" class="headerlink" title="2024/3/11 关系模型"></a>2024/3/11 关系模型</h3><ul>
<li><p>关系数据结构</p>
<ul>
<li>表结构<ul>
<li>表框架由n个命名的属性（attribute）组成，n被称为表的元数</li>
<li>表框架每行数据被称为“元组” ，一个表框架可存放m个元组，m被称为表的基数（Cardinality）</li>
</ul>
</li>
<li><p>键：</p>
<ul>
<li><p>如果表A中的属性集F是表B的键，则称该属性集F为表A的‘外键’（或称‘外关键字’）||<a href="https://blog.csdn.net/songhuangong123/article/details/127194673"><strong>外键</strong></a></p>
</li>
<li><p>不能只根据一张表中已有的元组来判断其有哪些‘候选键’，必须根据表中属性的语义含义及其相互联系才能确定表中的‘键’的组成</p>
</li>
</ul>
</li>
<li>关系</li>
</ul>
</li>
<li>关系操纵<ul>
<li>查询，插入，删除，修改</li>
<li>空值的处理<ul>
<li>关系的主键中不允许出现空值</li>
<li>需要定义有关空值的运算</li>
</ul>
</li>
<li>关系操纵与关系代数中的五种基本运算之间的对应关系</li>
</ul>
</li>
</ul>
<table border="2" >
    <tr>
        <th align="center">关系上的五种基本操作</th>
        <th align="center">关系代数中的五种基本运算</th>
    </tr>
    <tr>
        <td align=left bgcolor=white>元组选择</td>
        <td align=right bgcolor=white>选择运算</td>
    </tr>
    <tr>
        <td align=left bgcolor=white>属性指定</td>
        <td align=right bgcolor=white>投影运算</td>
    </tr>
    <tr>
        <td align =left bgcolor=white>关系的合并</td>
        <td align=right bgcolor=white>笛卡尔乘积</td>
    </tr>
    <tr>
        <td align =left bgcolor=white>元组的插入</td>
        <td align=right bgcolor=white>并运算</td>
    </tr>
    <tr>
        <td align =left bgcolor=white>元组的删除</td>
        <td align=right bgcolor=white>差运算</td>
    </tr>
</table> 

<p><strong>关系代数的符号</strong><br></p>
<script type="math/tex; mode=display">\pi:投影，用于从R中选择出若干属性列组成新的关系（默认去重）\\ \sigma(\delta,PPT上是这个):选择，用于在关系中选择满足给定条件的各个元组</script><p><strong>顺序</strong>：先组成关系集合，再选择，再投影<br>示例详见PPT108往前，database_03_1</p>
<h3 id="24-3-18-关系代数中的扩充运算"><a href="#24-3-18-关系代数中的扩充运算" class="headerlink" title="24/3/18 关系代数中的扩充运算"></a>24/3/18 关系代数中的扩充运算</h3><p>关系代数的扩充运算：</p>
<ul>
<li><a href="#section1">交运算</a></li>
<li><a href="#section2">除运算</a></li>
<li><a href="#section3">自然连接运算</a></li>
</ul>
<ul>
<li><a id="section1"></a> 交运算<ul>
<li>条件：同类关系 </li>
<li>结果：关系模式不变，由所有既属于关系R也属于关系S的元组所组成的集合</li>
</ul>
</li>
<li><a id="section2"></a> 除运算(详见P119)<ul>
<li>运算条件：Head(S)属于Head(R)</li>
<li>可以假设为:<br><br>Head(R)={A1,A2,……,An,B1,B2,……,Bm}<br><br>Head(S)={B1,B2,……，Bm}</li>
<li>其中:<ul>
<li>S被称为‘除数关系’</li>
<li>R被称为‘被除数关系’</li>
<li>结果关系被称为‘商’</li>
</ul>
</li>
</ul>
</li>
<li><a id="section3"></a> 联接运算$\Join$<ul>
<li>基本条件:$i\theta j$<br>其中i是关系R中的属性，j是S中的属性 </li>
<li>$\theta$是比较运算符<ul>
<li>大于，小于，等于联接</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>大二下</tag>
        <tag>课程</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/2024/02/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="2024-3-5-Amdahl定律"><a href="#2024-3-5-Amdahl定律" class="headerlink" title="2024/3/5 || Amdahl定律"></a>2024/3/5 || Amdahl定律</h3><ul>
<li>Amdahl定律<script type="math/tex; mode=display">T_{new}=(1- \alpha)T_{old}+(\alpha T_{old})/k=T_{old}[(1-\alpha)+\alpha /k]</script><script type="math/tex; mode=display">S=T_{old}/T_{new}</script><script type="math/tex; mode=display">S=\frac{1}{(1-\alpha)+\alpha /k}</script>对某部分加速<script type="math/tex; mode=display">T_{old}：某系统执行应用程序需要时间</script><script type="math/tex; mode=display">\alpha：系统加速部分所需执行时间占系统运行时间比例</script><script type="math/tex; mode=display">k：该部分提升比例</script><script type="math/tex; mode=display">T_{new}：新的所需总执行时间</script><script type="math/tex; mode=display">S：加速比</script>例子：一个占比0.6的部分速度提升3倍，但是最终加速比只有1.67倍<br><br>故：<strong>想要显著加速整个系统，必须提升全系统中相大的部分的速度</strong></li>
</ul>
<h3 id="2024-3-6-存储-虚拟机，信息存储"><a href="#2024-3-6-存储-虚拟机，信息存储" class="headerlink" title="2024/3/6 || 存储,虚拟机，信息存储"></a>2024/3/6 || 存储,虚拟机，信息存储</h3><ul>
<li><strong>磁盘</strong><ul>
<li>由<strong>盘片</strong>构成，每个盘片有两面称为表面，表面覆盖磁性记录材料，盘片中央有一个可以旋转的主轴，使盘片以固定旋转速率旋转。RPM：Revolution Per Minute</li>
<li><strong>表面</strong>每个表面是由一组称为磁道( track )的同心圆组成的。每个磁道被划分为一组扇区( sector) 。每个扇区包含相等数量的数据位（ 通常是512字节）</li>
<li>磁盘是由一个或多个叠放在一起的盘片组成的， 它们被封装在一个密封的包装里， 如图6-9b 所示。整个装置通常被称为磁盘驱动器( disk drive) ， 我们通常简称为磁盘( disk) 。有时， 我们会称磁盘为旋转磁盘( rotating disk ) ， 以使之区别千基于闪存的固态硬盘(SSD) , SSD 是没有移动部分的。<br><img src="https://pic.imgdb.cn/item/65e81a119f345e8d031a73d0.png" alt="加载不出来了qwq"></li>
</ul>
</li>
</ul>
<font color="white">
PS:<br>
磁盘控制器必须对磁盘进行格式化， 然后才能在该磁盘上存储数据。格式化包括用
标识扇区的信息填写扇区之间的间隙， 标识出表面有故障的柱面并且不使用它们， 以及
在每个区中预留出一组柱面作为备用， 如果区中一个或多个柱面在磁盘使用过程中坏掉
了， 就可以使用这些备用的柱面。因为存在着这些备用的柱面， 所以磁盘制造商所说的
格式化容量比最大容量要小。
</font>

<ul>
<li><strong>计算机系统抽象</strong><br><img src="https://pic.imgdb.cn/item/65e827da9f345e8d03454724.png" alt="加载不出来了qwq"><br>操作系统内核是应用程序和硬件之间的媒介。它提供三个基本的抽象：<br>1 ） 文件是对I/0 设备的抽象。<br>2 ） 虚拟内存是对主存和磁盘的抽象；。<br>3 ） 进程是处理器、主存和I/0 设备的抽象。<br><br></li>
<li><strong>信息存储</strong><br>大多数计算机使用8位的块，或者宇节(byte) ，作为最小的可寻的内存单位，而不是访问内存中单独的位。机器级程序将内存视为一个非常大的字节数组，称为虚拟内存(virtual memory)。内存的每个字节都由一个唯一的数字来标识，称为它的地址(address)，所有可能地址的集合就称为虚拟地址空间( virtual address space) 。<ul>
<li>16进制简写为hex</li>
<li>可以使用c语言程序强行输出地址查看</li>
</ul>
</li>
</ul>
<h3 id="2024-3-7-计算机启动-MBR反汇编"><a href="#2024-3-7-计算机启动-MBR反汇编" class="headerlink" title="2024/3/7 计算机启动||MBR反汇编"></a>2024/3/7 计算机启动||MBR反汇编</h3><ul>
<li>BIOS会指定启动的设备方便读取磁盘中的操作系统内核文件。由于不同的操作系统的文件系统格式不同，因此我们必须要以一个启动引导程序来处理内核文件加载问题。这个启动引导程序被称为boot loader。boot loader可以装在第一个扇区（sector）中，即MBR</li>
<li>linux将boot loader的程序执行与设置加载分为两个阶段<ul>
<li>执行boot loader：这个主程序必须要安装在启动区，亦即mbr或者启动扇区。但因为mbr太小所以仅安装最小主程序，没有安装loader相关配置文件。</li>
<li>主程序加载配置文件：通过boot loader加载所有配置文件与相关的环境参数文件。</li>
</ul>
</li>
</ul>
<p><a href="https://blog.csdn.net/lijiewen2017/article/details/124574991">MBR引导程序源码理解</a></p>
<h3 id="2024-3-24-反汇编语言学习"><a href="#2024-3-24-反汇编语言学习" class="headerlink" title="2024/3/24 反汇编语言学习"></a>2024/3/24 反汇编语言学习</h3><h4 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h4><pre><code>* PC主要内部硬件由处理器，存储器和寄存器组成，在大多数现代计算机上，一组8个相关位构成一个字节。
* 负二进制以二进制补码表示法表示，根据这个规则，将二进制转换为负值就是将其位值反转并加1.
* 处理器控制执行的过程称为**取址-解码-执行周期**
  * 处理器以相反的字节顺序存储数据:低位字节存储在低内存地址中，高位字节存储在高内存地址中。当处理器从内存获取数字到寄存器中，它会再次反转字节。内存地址有两种：1.绝对地址-具体位置的直接引用 2.段地址- 具有偏移值的内存段的起始地址
</code></pre><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><ul>
<li>指令寄存器:IR</li>
<li>程序计数器:PC</li>
<li>累加器:ACC<br>x86有14个16位寄存器，按其用途分为1)通用寄存器2)指令指针3)标志寄存器4)段寄存器<br>1)通用寄存器有8个，分为四个数据寄存器和四个指针寄存器和变址寄存器<br><strong>数据寄存器:</strong></li>
<li>AH&amp;AL=AX(accumulator):累加寄存器，常用于运算;在乘除等指令中指定用来存放操作数,另外, 所有的I/O指令都使用这一寄存器与外界设备传送数据.</li>
<li>BH&amp;BL=BX(base):基址寄存器，常用于地址索引;</li>
<li>CH&amp;CL=CX(count):计数寄存器，常用于计数;常用于保存计算值,如在移位指令,循环(loop)和串处理指令中用作隐含的计数器。<br><em>DH&amp;DL=DX(data):数据寄存器，常用于数据传递<br><br>他们的特点是,这4个16位的寄存器可以分为高8位: AH, BH, CH, DH.以及低八位：AL,BL,CL,DL。 这2组8位寄存器可以分别寻址，并单独使用。<br><em>*指针寄存器:</em></em></li>
<li>SP(Stack Pointer):堆栈指针，与SS配合使用，可指向目前的堆栈位置</li>
<li>BP(Base Pointer):基址指针寄存器，可用作SS的一个相对基址位置</li>
<li>SI(Source Index):源变址寄存器可用来存放相对于DS段之源变址指针</li>
<li>DI(Destination Index):目的变址寄存器，可用于存放相对于ES段之目的变址指针<br><br>这4个16位寄存器只能按16位进行存取操作， 主要用来形成操作数的地址， 用于堆栈操作和变址运算中计算操作数的有效地址</li>
</ul>
]]></content>
      <tags>
        <tag>大二下</tag>
        <tag>课程</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记</title>
    <url>/2024/01/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><h3 id="24-1-18"><a href="#24-1-18" class="headerlink" title="24.1.18"></a>24.1.18</h3><ul>
<li><em>饥饿，困苦和失望本就是生命中始终如一的主旋律。——《动物农场》</em></li>
</ul>
<h3 id="24-1-25"><a href="#24-1-25" class="headerlink" title="24.1.25"></a>24.1.25</h3><ul>
<li><em>“你的鬼心思看起来挺多的，是不是？”，这听起来就让人心生愧疚，眼角含泪。然而，在每个人内心深处，似乎始终存在一个不被侵蚀的自我，<br>他知道，不管自己做了什么——无论是哈哈大笑，还是放声大哭，或者是为了些小恩惠而感激涕零——他内心唯一的真实情感就是憎恨。  ——《这，就是快乐》</em></li>
</ul>
<h3 id="24-2-16"><a href="#24-2-16" class="headerlink" title="24.2.16"></a>24.2.16</h3><ul>
<li><em>美德在于获得胜利，在于比别人更强大、更强壮、更漂亮、更富有、更受欢迎、更优雅、更肆无忌怛——通过支配弱者、欺压弱者、让哪些弱者受苦、<br>让那些弱者变得越发愚蠢、在各个方面都胜过他们。<br><br>然而在我的内心深处，那个·真正的自我总是清楚地告诉我真正的美德与现实向我灌输的道理是迥然不同的。万事万物皆是同理，无论是凡俗的还是神圣的。<br>——《这，就是快乐》</em></li>
</ul>
<h3 id="24-2-16-1"><a href="#24-2-16-1" class="headerlink" title="24.2.16"></a>24.2.16</h3><ul>
<li><em>“再见，”临别前，老滑头嘴角含笑说道，“现在没必要再费时费力地管教你了。你在圣.赛浦鲁斯这段时间并没有取得多大的成功，对吧？而且我认为，你在学校里也不会取得多好的成绩。<br>我们其实不应该在你的身上浪费时间和金钱。你的世界观，还有你这样的家庭背景，进行这类教育其实没什么用处。哦，别以为我们不了解你！你的脑子里在想什么，我们都一清二楚。<br>我们知道你不相信我们教给你的一切，也清楚你一点都不感激我们为你所做的一切。不过，现在再说这些也没什么意义了。我们不必再对你负责，也不会在见到你。<br>最后再客观地评价一句吧，我们终究得承认，你确实是我们的失败作品之一，所以，再见吧。”</em><br><br></li>
<li><em>说到这儿，我想起镇上的一家商店里，只要花两便士就能买到香甜的奶油圆面包。要是我的旅费不小心多了一先令，也足够我在路上额外来杯香浓的咖啡，再吃上一两块蛋糕<br>——即使只是这些细枝末节，也足以让我感到幸福快乐。幸好，在悲惨的未来向我逼近之前，我还有时间来享受一点微不足道的幸福。但我知道自己的未来注定黑暗。<br>失败、失败，还是失败——失败讲永远伴随着我，这是迄今为止我最深刻的执念。</em><br><br></li>
<li><em>问题并不在于男孩们是否会在周日还被要求系上伊顿公学的硬领结，也不在于孩子们是否会被告知他们其实是被人从醋栗丛下挖出来的。无可否认，类似上述的这类事情已经不会再发生了。<br>真正的问题在于，让一个学生一直生活在荒谬的恐惧和愚蠢的误解之中，这是否是正常的。</em><br><br><em>——《这，就是快乐》</em></li>
</ul>
<h3 id="24-3-6"><a href="#24-3-6" class="headerlink" title="24.3.6"></a>24.3.6</h3><ul>
<li><em>我对自己的行为并不怎么痛悔。但是如此激烈的指控却令我骇怪。我很想好言好语给他解释，几乎怀着些许友爱，说是任何事情，我都从来做不到真正后悔过。我的心思总是牵挂着即将发生的事情，牵挂着今天或明天。只是它们把我置于这种境地，我当然不能以这种口吻跟任何人说话了。我没有权力表现出友爱，没有权利表现出善意。因此，我还是尽量听听，因为检察官开始讨论我的灵魂了。</em> <br></li>
<li><em>为求尽善尽美，为求我不再感到那么孤独，我只期望行刑那天围观观众，都向我发出憎恨的吼声</em> <br><br><em>—— 《局外人》</em></li>
</ul>
<h3 id="24-3-11"><a href="#24-3-11" class="headerlink" title="24.3.11"></a>24.3.11</h3><h4 id="《春泥棒》"><a href="#《春泥棒》" class="headerlink" title="《春泥棒》"></a><strong>《春泥棒》</strong></h4><p>高架橋を抜けたら雲の隙間に青が覗いた<br><br>穿过高架桥，从云隙间窥见一抹蔚蓝<br><br>ko kakyo wo nuketa rakumo no suki ma ni ao ga nozo i ta<br><br>こかきょをぬけたらくものすきまにあおがのぞいた</p>
<p><br>最近どうも暑いからただ風が吹くのを待ってた<br><br>近来实在是燥热难耐，只是静候着一缕清风<br><br>sai kin dou mo atsu i kara tada kaze ga fuku nowo ma tte ta</p>
<p><br>木陰に座る<br><br>坐在树荫下<br><br>kogae ni suwaru</p>
<p><br>何か頬に付く<br><br>有什么东西粘上了脸颊<br><br>nani ka ho ni tsuku</p>
<p><br>見上げれば頭上に咲いて散る<br><br>向上望去，头顶一片花开花落<br><br>mi agere ba tsu jyo ni sai te chiru</p>
<p><br>はらり、僕らもう息も忘れて<br><br>飞花飘零，我们连呼吸也忘却<br><br>harari boku ramou iki mo wasure</p>
<p><br>瞬きさえ億劫<br><br>甚至不愿眨眼<br><br>mada daki sae oku u </p>
<p><br>さぁ、今日さえ明日過去に変わる<br><br>看吧，就连今天到了明日也将变成过去<br><br>saa kyo sae ashi ta kako ni kawaru</p>
<p><br>ただ風を待つ<br><br>只是静候春风<br><br>tada kaze womatsu</p>
<p><br>だから僕らもう声も忘れて<br><br>所以我们连声音也忘却<br><br>dakara boku tamou koe mo wasurete</p>
<p><br>さよならさえ億劫<br><br>甚至不愿说出再见<br><br>sayo nara sae o kku u</p>
<p><br>ただ花が降るだけ晴れり<br><br>只是落花纷纷<br><br>tada hana gafuru dake hareri</p>
<p><br>今、春吹雪<br><br>此刻，阳光明媚，樱飞漫天<br><br>ima haru fu yuki</p>
<p><br>次の日も待ち合わせ<br><br>第二天也是碰头的日子<br><br>tsuki no himo machi awase</p>
<p><br>花見の客も少なくなった<br><br>来赏花的游客也变少了<br><br>hanami no kyaku mo su na ku natta</p>
<p><br>春の匂いはもう止む<br><br>春日的气息已然画上句点<br><br>haru noni o i ha mou yamu</p>
<p><br>今年も夏が来るのか<br><br>今年也要迎来夏天了吗？<br><br>kotoshi mo natsu ga kuru noka</p>
<p><br>高架橋を抜けたら道の先に君が覗いた<br><br>穿过高架桥，在道路的前方瞥见了你的身影<br><br>ko kakyo wo nuke ta ramichi no saki ni kimi ga naso ita</p>
<p><br>残りはどれだけかな<br><br>究竟还剩下多少次呢？<br><br>nokori ha dore dake kana</p>
<p><br>どれだけ春に会えるだろう<br><br>究竟还能遇见多少次春天呢？<br><br>dore dake haru ni ae ru darou</p>
<p><br>川沿いの丘、木陰に座る<br><br>沿着河川的小丘上，坐在树荫下<br><br>kawa zo i no oka ko ga eni suwaru</p>
<p><br>また昨日と変わらず今日も咲く花に<br><br>还是一如昨日，望着盛放的樱花<br><br>mada ki no to kawarazu kyo mo saku hanani</p>
<p><br>僕らもう息も忘れて<br><br>我们连呼吸也忘却<br><br>bokura mo u iki mo wasurete</p>
<p><br>瞬きさえ億劫<br><br>甚至不愿眨眼<br><br>mada daki sae oku u </p>
<p><br>花散らせ今吹くこの嵐は<br><br>此刻吹落花海的这阵大风<br><br>hana chirase ima fuku kono arashi ha</p>
<p><br>まさに春泥棒<br><br>正是窃走春日的盗贼<br><br>masani haru doro bo o</p>
<p><br>風に今日ももう時が 流れて<br><br>今天的时间就这样于风中流逝<br><br>kaze ni kyo mo mou toki ga nagarete</p>
<p><br>立つことさえ億劫<br><br>连站着也觉得麻烦<br><br>da tsu koto sae okuu</p>
<p><br>花の隙間に空、散れり<br><br>花间的天空<br><br>hana nosu ki mani sora chireri</p>
<p><br>まだ、春吹雪<br><br>春吹雪，仍是落花纷纷，樱飞漫天<br><br>mada haru fu yuki</p>
<p><br>今日も会いに行く<br><br>今天也要去见你<br><br>kyo omo ai ni iku</p>
<p><br>木陰に座る<br><br>坐在树荫下<br><br>koga eni suwaru</p>
<p><br>溜息を吐く<br><br>轻声叹气<br><br>dame iku wo tsuku</p>
<p><br>花ももう終わる<br><br>花季也要结束了<br><br>hana mo mou owaru</p>
<p><br>明日も会いに行く<br><br>明天也要去见你<br><br>asumo ai ni iku</p>
<p><br>春がもう終わる<br><br>春天也要结束了<br><br>haru ga mou owaru</p>
<p><br>名残るように時間が散っていく<br><br>又好像有些恋恋不舍，时间就这样悄然而逝<br><br>na oko ru youni jikan ga chi tte iku</p>
<p><br>愛を歌えば言葉足らず<br>言语远不足以用来歌唱我的爱意<br><br>ai wo uta e ba kotoba tarazu</p>
<p><br>踏む韻さえ億劫<br><br>连押韵也只觉得麻烦<br><br>fu mu ni sae okuu</p>
<p><br>花開いた今を言葉如きが語れるものか<br><br>此刻樱花满开的盛景岂能用三言两语述说？<br><br>hana hirai ta ima wo koto ba koto ki ga katareru mono ka</p>
<p><br>はらり、僕らもう息も忘れて<br><br>飞花飘零，我们连呼吸也忘却<br><br>harari boku ramou koe mowasure te</p>
<p><br>瞬きさえ億劫<br><br>甚至不愿眨眼<br><br>mada da ki sae okuu</p>
<p><br>花見は僕らだけ<br><br>仅有你和我两人的赏花<br><br>hana mi ha bokura dake</p>
<p><br>散るなまだ、春吹雪<br><br>春意尚在，樱飞漫天<br><br>chiru namada haru fu yuki</p>
<p><br>あともう少しだけ<br><br>还剩下一点点<br><br>ato mou su koshi dake</p>
<p><br>もう数えられるだけ<br><br>还能继续数下去<br><br>mou kazoe rareru dake</p>
<p><br>あと花二つだけ<br><br>还余下春花两瓣<br><br>ato hana futatsu dake</p>
<p><br>もう花一つだけ<br><br>还剩一簇春花孤绽<br><br>mou hana hitotsu dake</p>
<p><br>ただ葉が残るだけ、はらり<br><br>最后只留绿叶独展<br><br>tada haga nokoru dake harari</p>
<p><br>今、春仕舞い<br><br>此刻，飞花飘零，春日了完<br><br>ima haru chimai</p>
]]></content>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
</search>
